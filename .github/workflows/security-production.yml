name: Production Security Check

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
  schedule:
    # Run production security check weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

permissions:
  contents: read
  security-events: write

jobs:
  production-security-audit:
    name: Production Security Audit
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Install security tools
      run: |
        # Install comprehensive security tools
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        go install golang.org/x/vuln/cmd/govulncheck@latest
        go install honnef.co/go/tools/cmd/staticcheck@latest
        
        # Install additional security tools
        wget -q https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
        tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
        chmod +x gitleaks

    - name: Comprehensive security scan
      run: |
        echo "🔍 Running comprehensive security scan..."
        
        # Go security analysis
        echo "📊 Running Go security analysis..."
        gosec -fmt json -out gosec-report.json ./...
        gosec -fmt sarif -out gosec-report.sarif ./...
        
        # Vulnerability check
        echo "🔍 Checking for vulnerabilities..."
        govulncheck ./... > vuln-report.txt 2>&1 || true
        
        # Static analysis
        echo "📋 Running static analysis..."
        staticcheck ./... > staticcheck-report.txt 2>&1 || true
        
        # Secret detection
        echo "🔐 Scanning for secrets..."
        ./gitleaks detect --source . --verbose --report-format json --report-path gitleaks-report.json || true
        
        # Generate security report
        echo "📄 Generating security report..."
        cat > security-report.md << EOF
        # Security Audit Report
        
        Generated: $(date)
        Environment: ${{ github.event.inputs.environment || 'production' }}
        
        ## Go Security Analysis (gosec)
        EOF
        
        if [ -f gosec-report.json ]; then
          HIGH_ISSUES=$(jq '.Stats.G1 + .Stats.G2 + .Stats.G3' gosec-report.json)
          MEDIUM_ISSUES=$(jq '.Stats.G4' gosec-report.json)
          LOW_ISSUES=$(jq '.Stats.G5' gosec-report.json)
          
          echo "- High Severity Issues: $HIGH_ISSUES" >> security-report.md
          echo "- Medium Severity Issues: $MEDIUM_ISSUES" >> security-report.md
          echo "- Low Severity Issues: $LOW_ISSUES" >> security-report.md
          
          if [ "$HIGH_ISSUES" -gt 0 ]; then
            echo "## High Severity Issues" >> security-report.md
            cat gosec-report.json | jq -r '.Issues[] | select(.severity == "HIGH") | "- \(.rule_id): \(.details)"' >> security-report.md
          fi
        fi
        
        echo "" >> security-report.md
        echo "## Vulnerability Check (govulncheck)" >> security-report.md
        if [ -f vuln-report.txt ]; then
          echo '```' >> security-report.md
          cat vuln-report.txt >> security-report.md
          echo '```' >> security-report.md
        fi
        
        echo "" >> security-report.md
        echo "## Static Analysis (staticcheck)" >> security-report.md
        if [ -f staticcheck-report.txt ]; then
          echo '```' >> security-report.md
          cat staticcheck-report.txt >> security-report.md
          echo '```' >> security-report.md
        fi
        
        echo "" >> security-report.md
        echo "## Secret Detection (gitleaks)" >> security-report.md
        if [ -f gitleaks-report.json ]; then
          SECRETS_COUNT=$(jq '. | length' gitleaks-report.json)
          echo "- Potential Secrets Found: $SECRETS_COUNT" >> security-report.md
          if [ "$SECRETS_COUNT" -gt 0 ]; then
            echo "### Detected Secrets:" >> security-report.md
            cat gitleaks-report.json | jq -r '.[] | "- \(.rule): \(.file):\(.line)"' >> security-report.md
          fi
        fi

    - name: Security compliance check
      run: |
        echo "🔒 Checking security compliance..."
        
        # Check for required security features
        COMPLIANCE_ISSUES=0
        
        # Check for HTTPS configuration
        if ! grep -q "USE_TLS=true" docker-compose.yml; then
          echo "❌ HTTPS not enabled in docker-compose.yml"
          COMPLIANCE_ISSUES=$((COMPLIANCE_ISSUES + 1))
        fi
        
        # Check for rate limiting
        if ! grep -q "RATE_LIMIT_ENABLED=true" docker-compose.yml; then
          echo "❌ Rate limiting not enabled"
          COMPLIANCE_ISSUES=$((COMPLIANCE_ISSUES + 1))
        fi
        
        # Check for security headers
        if ! grep -q "SECURITY_CONTENT_TYPE_NOSNIFF=true" docker-compose.yml; then
          echo "❌ Security headers not configured"
          COMPLIANCE_ISSUES=$((COMPLIANCE_ISSUES + 1))
        fi
        
        # Check for CORS configuration
        if ! grep -q "CORS_ALLOWED_ORIGINS" docker-compose.yml; then
          echo "❌ CORS not configured"
          COMPLIANCE_ISSUES=$((COMPLIANCE_ISSUES + 1))
        fi
        
        # Check for authentication
        if ! grep -q "JWT_SECRET" docker-compose.yml; then
          echo "❌ JWT authentication not configured"
          COMPLIANCE_ISSUES=$((COMPLIANCE_ISSUES + 1))
        fi
        
        if [ $COMPLIANCE_ISSUES -eq 0 ]; then
          echo "✅ All security compliance checks passed"
        else
          echo "❌ $COMPLIANCE_ISSUES security compliance issues found"
          exit 1
        fi

    - name: Performance security test
      run: |
        echo "⚡ Testing performance under security load..."
        
        # Start application
        docker-compose up -d
        sleep 30
        
        # Test rate limiting under load
        echo "Testing rate limiting..."
        for i in {1..100}; do
          curl -k -s -o /dev/null -w "%{http_code}\n" https://localhost:8443/health &
        done
        wait
        
        # Test DDoS protection
        echo "Testing DDoS protection..."
        for i in {1..200}; do
          curl -k -s -o /dev/null -w "%{http_code}\n" https://localhost:8443/api/v1/users/ &
        done
        wait
        
        # Cleanup
        docker-compose down

    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: production-security-reports
        path: |
          gosec-report.json
          gosec-report.sarif
          vuln-report.txt
          staticcheck-report.txt
          gitleaks-report.json
          security-report.md

    - name: Upload SARIF files
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: gosec-report.sarif

    - name: Security notification
      if: failure()
      run: |
        echo "🚨 Security audit failed for ${{ github.event.inputs.environment || 'production' }} environment"
        echo "Please review the security reports and fix any issues before deployment"

    - name: Security summary
      run: |
        echo "## 🔒 Production Security Audit Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment**: ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Date**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f gosec-report.json ]; then
          HIGH_ISSUES=$(jq '.Stats.G1 + .Stats.G2 + .Stats.G3' gosec-report.json)
          MEDIUM_ISSUES=$(jq '.Stats.G4' gosec-report.json)
          LOW_ISSUES=$(jq '.Stats.G5' gosec-report.json)
          
          echo "### Security Issues Found:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔴 High Severity: $HIGH_ISSUES" >> $GITHUB_STEP_SUMMARY
          echo "- 🟡 Medium Severity: $MEDIUM_ISSUES" >> $GITHUB_STEP_SUMMARY
          echo "- 🟢 Low Severity: $LOW_ISSUES" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f gitleaks-report.json ]; then
          SECRETS_COUNT=$(jq '. | length' gitleaks-report.json)
          echo "- 🔐 Potential Secrets: $SECRETS_COUNT" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Security Features Verified:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ HTTPS/TLS Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Rate Limiting & DDoS Protection" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security Headers & CORS" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Authentication & Authorization" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Input Validation & SQL Injection Protection" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Secret Detection" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Dependency Vulnerability Scanning" >> $GITHUB_STEP_SUMMARY
