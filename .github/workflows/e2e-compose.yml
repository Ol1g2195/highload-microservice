name: e2e-compose

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build app image
        run: docker build -t highload-microservice:latest .

      - name: Start stack
        run: |
          docker compose up -d
          docker compose ps
          echo "Waiting for services to start..."
          sleep 10
          docker compose logs app

      - name: Wait for app health
        shell: bash
        run: |
          echo "Checking if app container is running..."
          docker compose ps app
          echo "Checking app logs..."
          docker compose logs app --tail=20
          echo "Testing connectivity..."
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8080/health || true)
            if [ "$code" = "200" ]; then 
              echo "App is healthy"
              exit 0
            fi
            echo "Waiting for app health... attempt $i/60 (code: $code)"
            if [ $((i % 10)) -eq 0 ]; then
              echo "Checking app logs after $i attempts..."
              docker compose logs app --tail=10
            fi
            sleep 5
          done
          echo "App failed to become healthy after 5 minutes" >&2
          echo "Final app logs:"
          docker compose logs app --tail=50
          exit 1

      - name: Login as admin
        id: login
        shell: bash
        run: |
          LOGIN_PAYLOAD='{"email":"admin@highload-microservice.local","password":"admin123456"}'
          resp=$(curl -s -X POST http://localhost:8080/api/v1/auth/login \
            -H 'Content-Type: application/json' -d "$LOGIN_PAYLOAD")
          echo "$resp" | jq . >/dev/null 2>&1 || { echo "Login response is not JSON"; echo "$resp"; exit 1; }
          TOKEN=$(echo "$resp" | jq -r .access_token)
          test "$TOKEN" != "null" -a -n "$TOKEN" || { echo "No access token"; echo "$resp"; exit 1; }
          echo "token=$TOKEN" >> "$GITHUB_OUTPUT"

      - name: Smoke - create user (authorized)
        id: create_user
        shell: bash
        run: |
          TOKEN='${{ steps.login.outputs.token }}'
          uniq=$(date +%s)
          email="user_${uniq}@example.com"
          body=$(mktemp)
          code=$(curl -s -o "$body" -w '%{http_code}' -X POST http://localhost:8080/api/v1/users/ \
            -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN" \
            -d "{\"email\":\"$email\",\"first_name\":\"John\",\"last_name\":\"Doe\"}")
          echo "Response code: $code"
          cat "$body"
          if [ "$code" != "201" ]; then echo "create user failed"; exit 1; fi
          id=$(cat "$body" | jq -r '.id')
          if [ -z "$id" ] || [ "$id" = "null" ]; then echo "create user failed: no id in body"; exit 1; fi
          echo "id=$id" >> "$GITHUB_OUTPUT"

      - name: Smoke - create event (authorized)
        shell: bash
        run: |
          id="${{ steps.create_user.outputs.id }}"
          TOKEN='${{ steps.login.outputs.token }}'
          curl -s -X POST http://localhost:8080/api/v1/events/ \
            -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN" \
            -d "{\"user_id\":\"$id\",\"type\":\"smoke_event\",\"data\":\"{\\\"action\\\":\\\"login\\\"}\"}" | jq .

      - name: Smoke - list events (authorized)
        shell: bash
        run: |
          TOKEN='${{ steps.login.outputs.token }}'
          curl -s -H "Authorization: Bearer $TOKEN" http://localhost:8080/api/v1/events?page=1&limit=10 | jq .

      - name: Show logs on failure
        if: failure()
        run: docker compose logs app

      - name: Teardown
        if: always()
        run: docker compose down -v


