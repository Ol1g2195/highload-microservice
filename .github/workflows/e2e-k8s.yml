name: e2e-k8s

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create kind cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: e2e

      - name: Build app image
        run: docker build -t highload-microservice:latest .

      - name: Load image into kind
        run: kind load docker-image highload-microservice:latest --name e2e

      - name: Apply K8s manifests
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/secret.yaml -n highload-microservice
          kubectl apply -f k8s/configmap.yaml -n highload-microservice
          kubectl apply -f k8s/postgres-deployment.yaml -n highload-microservice
          kubectl apply -f k8s/redis-deployment.yaml -n highload-microservice
          kubectl apply -f k8s/kafka-deployment.yaml -n highload-microservice

      - name: Wait dependencies
        run: |
          kubectl wait --for=condition=ready pod -l app=postgres  -n highload-microservice --timeout=600s
          kubectl wait --for=condition=ready pod -l app=redis     -n highload-microservice --timeout=600s
          kubectl wait --for=condition=ready pod -l app=zookeeper -n highload-microservice --timeout=900s
          kubectl wait --for=condition=ready pod -l app=kafka     -n highload-microservice --timeout=900s

      - name: Deploy app
        run: |
          kubectl -n highload-microservice set image deployment/highload-microservice highload-microservice=highload-microservice:latest || true
          kubectl apply -f k8s/app-deployment.yaml -n highload-microservice
          kubectl rollout status deployment/highload-microservice -n highload-microservice

      - name: Port-forward app (background)
        run: kubectl port-forward service/highload-service 8080:80 -n highload-microservice >pf.log 2>&1 &

      - name: Wait for health
        shell: bash
        run: |
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8080/health || true)
            if [ "$code" = "200" ]; then exit 0; fi
            sleep 2
          done
          echo "App is not healthy" >&2; exit 1

      - name: Smoke - create user
        id: create_user
        shell: bash
        run: |
          resp=$(curl -s -X POST http://localhost:8080/api/v1/users \
            -H "Content-Type: application/json" \
            -d '{"email":"user@example.com","first_name":"John","last_name":"Doe"}')
          echo "$resp"
          id=$(echo "$resp" | jq -r '.id')
          if [ -z "$id" ] || [ "$id" = "null" ]; then echo "create user failed"; exit 1; fi
          echo "id=$id" >> "$GITHUB_OUTPUT"

      - name: Smoke - create event
        shell: bash
        run: |
          id="${{ steps.create_user.outputs.id }}"
          curl -s -X POST http://localhost:8080/api/v1/events \
            -H "Content-Type: application/json" \
            -d "{\"user_id\":\"$id\",\"type\":\"smoke_event\",\"data\":\"{\\\"action\\\":\\\"login\\\"}\"}" | jq .

      - name: Smoke - list events
        shell: bash
        run: |
          curl -s http://localhost:8080/api/v1/events?page=1&limit=10 | jq .

      - name: Diagnostics on failure
        if: failure()
        run: |
          kubectl logs -l app=highload-microservice -n highload-microservice --tail=300 || true
          kubectl get pods,svc,events -n highload-microservice


