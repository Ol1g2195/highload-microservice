name: e2e-k8s

on:
  workflow_dispatch:

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create kind cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: e2e

      - name: Build app image
        run: docker build -t highload-microservice:latest .

      - name: Load image into kind
        run: kind load docker-image highload-microservice:latest --name e2e

      - name: Apply K8s manifests
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/secret.yaml -n highload-microservice
          kubectl apply -f k8s/configmap.yaml -n highload-microservice
          kubectl apply -f k8s/postgres-deployment.yaml -n highload-microservice
          kubectl apply -f k8s/redis-deployment.yaml -n highload-microservice
          kubectl apply -f k8s/kafka-deployment.yaml -n highload-microservice
          # Ensure app picks up updated config (rate limits/DDOS)
          kubectl rollout restart deployment/highload-microservice -n highload-microservice || true

      - name: Wait dependencies
        run: |
          kubectl wait --for=condition=ready pod -l app=postgres  -n highload-microservice --timeout=600s
          kubectl wait --for=condition=ready pod -l app=redis     -n highload-microservice --timeout=600s
          kubectl wait --for=condition=ready pod -l app=zookeeper -n highload-microservice --timeout=900s
          kubectl wait --for=condition=ready pod -l app=kafka     -n highload-microservice --timeout=900s

      - name: Deploy app
        run: |
          kubectl -n highload-microservice set image deployment/highload-microservice highload-microservice=highload-microservice:latest || true
          kubectl apply -f k8s/app-deployment.yaml -n highload-microservice
          kubectl rollout status deployment/highload-microservice -n highload-microservice

      - name: Port-forward app (background)
        run: |
          kubectl port-forward service/highload-service 8080:80 -n highload-microservice >pf.log 2>&1 &
          sleep 2

      - name: Wait for health
        shell: bash
        run: |
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8080/health || true)
            if [ "$code" = "200" ]; then 
              echo "App is healthy"
              exit 0
            fi
            echo "Waiting for app health... attempt $i/60 (code: $code)"
            if [ $((i % 10)) -eq 0 ]; then
              echo "=== Port-forward logs ==="; cat pf.log || true
            fi
            sleep 2
          done
          echo "App is not healthy after 60 attempts" >&2; exit 1

      - name: Login as admin
        id: login
        shell: bash
        run: |
          LOGIN_PAYLOAD='{"email":"admin@highload-microservice.local","password":"admin123456"}'
          resp=$(curl -s -X POST http://localhost:8080/api/v1/auth/login \
            -H 'Content-Type: application/json' -d "$LOGIN_PAYLOAD")
          echo "$resp" | jq . >/dev/null 2>&1 || { echo "Login response is not JSON"; echo "$resp"; exit 1; }
          TOKEN=$(echo "$resp" | jq -r .access_token)
          test "$TOKEN" != "null" -a -n "$TOKEN" || { echo "No access token"; echo "$resp"; exit 1; }
          echo "token=$TOKEN" >> "$GITHUB_OUTPUT"

      - name: Smoke - create user (authorized)
        id: create_user
        shell: bash
        run: |
          TOKEN='${{ steps.login.outputs.token }}'
          uniq=$(date +%s)
          email="user_${uniq}@example.com"
          body=$(mktemp)
          code=$(curl -s -o "$body" -w '%{http_code}' -X POST http://localhost:8080/api/v1/users/ \
            -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN" \
            -d "{\"email\":\"$email\",\"first_name\":\"John\",\"last_name\":\"Doe\"}")
          echo "Response code: $code"; cat "$body"
          if [ "$code" != "201" ] && [ "$code" != "409" ]; then 
            echo "create user failed"; 
            echo "=== Pod logs ==="; kubectl logs -l app=highload-microservice -n highload-microservice --tail=200 || true;
            exit 1; 
          fi
          id=$(cat "$body" | jq -r '.id // empty')
          if [ -z "$id" ]; then id="dummy"; fi
          echo "id=$id" >> "$GITHUB_OUTPUT"

      - name: Smoke - create event (authorized)
        shell: bash
        run: |
          id="${{ steps.create_user.outputs.id }}"
          TOKEN='${{ steps.login.outputs.token }}'
          curl -s -X POST http://localhost:8080/api/v1/events/ \
            -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN" \
            -d "{\"user_id\":\"$id\",\"type\":\"smoke_event\",\"data\":\"{\\\"action\\\":\\\"login\\\"}\"}" | jq .

      - name: Smoke - list events (authorized)
        shell: bash
        run: |
          TOKEN='${{ steps.login.outputs.token }}'
          curl -s -H "Authorization: Bearer $TOKEN" http://localhost:8080/api/v1/events?page=1&limit=10 | jq .

      - name: Diagnostics on failure
        if: failure()
        run: |
          echo "=== Pods status ==="
          kubectl get pods -n highload-microservice
          echo "=== Services ==="
          kubectl get svc -n highload-microservice
          echo "=== Events ==="
          kubectl get events -n highload-microservice --sort-by='.lastTimestamp'
          echo "=== App logs ==="
          kubectl logs -l app=highload-microservice -n highload-microservice --tail=300 || true
          echo "=== Port-forward logs ==="
          cat pf.log || true
          echo "=== Health check ==="
          curl -v http://localhost:8080/health || true


