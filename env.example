# High-Load Microservice Configuration
# Copy this file to .env and update the values

# =============================================
# SERVER CONFIGURATION
# =============================================
SERVER_HOST=0.0.0.0
SERVER_PORT=8080
USE_TLS=true
TLS_CERT=certs/server.crt
TLS_KEY=certs/server.key

# =============================================
# DATABASE CONFIGURATION
# =============================================
DB_HOST=localhost
DB_PORT=5432
DB_USER=postgres
# Use 'secrets set DB_PASSWORD' to set encrypted password
DB_PASSWORD=postgres
DB_NAME=highload_db
DB_SSLMODE=disable

# =============================================
# REDIS CONFIGURATION
# =============================================
REDIS_HOST=localhost
REDIS_PORT=6379
# Use 'secrets set REDIS_PASSWORD' to set encrypted password
REDIS_PASSWORD=
REDIS_DB=0

# =============================================
# KAFKA CONFIGURATION
# =============================================
KAFKA_BROKERS=localhost:9092
KAFKA_TOPIC=user-events
KAFKA_GROUP_ID=highload-service

# =============================================
# AUTHENTICATION CONFIGURATION
# =============================================
# Use 'secrets set JWT_SECRET' to set encrypted JWT secret
JWT_SECRET=your-super-secret-jwt-key-change-in-production
JWT_EXPIRATION_HOURS=24
REFRESH_EXPIRATION_DAYS=7
API_KEY_LENGTH=32

# =============================================
# RATE LIMITING CONFIGURATION
# =============================================
RATE_LIMIT_ENABLED=true
RATE_LIMIT_REQUESTS_PER_MINUTE=60
RATE_LIMIT_BURST_SIZE=10
RATE_LIMIT_AUTH_REQUESTS_PER_MINUTE=5
RATE_LIMIT_AUTH_BURST_SIZE=2

# =============================================
# LOGGING CONFIGURATION
# =============================================
LOG_LEVEL=info

# =============================================
# CORS CONFIGURATION
# =============================================
CORS_ALLOWED_ORIGINS=https://localhost:3000,https://127.0.0.1:3000,https://localhost:8080,https://127.0.0.1:8080
CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS,HEAD
CORS_ALLOWED_HEADERS=Origin,Content-Type,Accept,Authorization,X-Requested-With,X-Request-ID,X-API-Key
CORS_EXPOSED_HEADERS=X-Request-ID,X-RateLimit-Limit,X-RateLimit-Remaining,X-RateLimit-Reset
CORS_ALLOW_CREDENTIALS=true
CORS_MAX_AGE=86400

# =============================================
# SECURITY HEADERS CONFIGURATION
# =============================================
SECURITY_CONTENT_TYPE_NOSNIFF=true
SECURITY_FRAME_DENY=true
SECURITY_XSS_PROTECTION=true
SECURITY_REFERRER_POLICY=strict-origin-when-cross-origin
SECURITY_PERMISSIONS_POLICY=geolocation=(),microphone=(),camera=()
SECURITY_CSP=default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'none'; base-uri 'self'; form-action 'self';

# =============================================
# SECURITY CONFIGURATION
# =============================================
# Use 'secrets generate-key' to generate a new encryption key
ENCRYPTION_KEY=

# =============================================
# PRODUCTION SECURITY NOTES
# =============================================
# 1. Generate a strong JWT secret:
#    go run cmd/secrets/main.go set JWT_SECRET
#
# 2. Set a strong database password:
#    go run cmd/secrets/main.go set DB_PASSWORD
#
# 3. Set Redis password if needed:
#    go run cmd/secrets/main.go set REDIS_PASSWORD
#
# 4. Generate encryption key:
#    go run cmd/secrets/main.go generate-key
#
# 5. Validate all secrets:
#    go run cmd/secrets/main.go validate
#
# 6. Use HTTPS in production (USE_TLS=true)
# 7. Use strong database passwords
# 8. Enable SSL for database connections (DB_SSLMODE=require)
# 9. Set up proper firewall rules
# 10. Use environment-specific configurations