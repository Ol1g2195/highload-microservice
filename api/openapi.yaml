openapi: 3.0.3
info:
  title: Highload Microservice API
  version: 1.0.0
  description: |
    OpenAPI спецификация для highload‑микросервиса.
    Включает аутентификацию (JWT), CRUD для пользователей/событий и security endpoints.
servers:
  - url: http://localhost:8080
    description: Local HTTP
  - url: https://localhost:8443
    description: Local HTTPS
security:
  - bearerAuth: []
tags:
  - name: Auth
  - name: Users
  - name: Events
  - name: System
  - name: Security(Admin)
paths:
  /health:
    get:
      tags: [System]
      summary: Health check
      responses:
        '200':
          description: OK
  /api/v1/auth/login:
    post:
      tags: [Auth]
      summary: Login with email/password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Auth tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
  /api/v1/auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: New access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
  /api/v1/users/:
    get:
      tags: [Users]
      summary: List users (paginated)
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 200, default: 50 }
        - in: query
          name: cursor
          schema: { type: string }
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }
    post:
      tags: [Users]
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '409':
          description: Conflict (email exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/events/:
    get:
      tags: [Events]
      summary: List events (paginated)
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 500, default: 100 }
        - in: query
          name: cursor
          schema: { type: string }
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventListResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }
    post:
      tags: [Events]
      summary: Create event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
  /admin/security/stats:
    get:
      tags: [Security(Admin)]
      summary: Security statistics
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Stats
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
  /admin/security/events:
    get:
      tags: [Security(Admin)]
      summary: Security events (recent)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SecurityEvent'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
      required: [error]
    LoginRequest:
      type: object
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 8 }
      required: [email, password]
    LoginResponse:
      type: object
      properties:
        access_token: { type: string }
        refresh_token: { type: string }
        expires_in: { type: integer, description: Seconds }
      required: [access_token, refresh_token, expires_in]
    RefreshTokenRequest:
      type: object
      properties:
        refresh_token: { type: string }
      required: [refresh_token]
    RefreshTokenResponse:
      type: object
      properties:
        access_token: { type: string }
        expires_in: { type: integer }
      required: [access_token, expires_in]
    CreateUserRequest:
      type: object
      properties:
        email: { type: string, format: email }
        first_name: { type: string }
        last_name: { type: string }
      required: [email, first_name, last_name]
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        email: { type: string, format: email }
        first_name: { type: string }
        last_name: { type: string }
        created_at: { type: string, format: date-time }
      required: [id, email, first_name, last_name, created_at]
    UserListResponse:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/User' }
        next_cursor: { type: string, nullable: true }
      required: [items]
    CreateEventRequest:
      type: object
      properties:
        type: { type: string }
        payload: { type: object, additionalProperties: true }
      required: [type]
    Event:
      type: object
      properties:
        id: { type: string, format: uuid }
        type: { type: string }
        payload: { type: object, additionalProperties: true }
        created_at: { type: string, format: date-time }
      required: [id, type, created_at]
    EventListResponse:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/Event' }
        next_cursor: { type: string, nullable: true }
      required: [items]
    SecurityEvent:
      type: object
      properties:
        id: { type: string, format: uuid }
        timestamp: { type: string, format: date-time }
        level: { type: string, enum: [INFO, WARN, ERROR] }
        type: { type: string }
        user_id: { type: string, nullable: true }
        ip: { type: string, nullable: true }
        user_agent: { type: string, nullable: true }
        request_id: { type: string, nullable: true }
        endpoint: { type: string, nullable: true }
        method: { type: string, nullable: true }
        status: { type: integer, nullable: true }
        metadata: { type: object, additionalProperties: true }
        risk_score: { type: number, format: float }
        blocked: { type: boolean }

